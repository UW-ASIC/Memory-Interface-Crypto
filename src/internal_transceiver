`default_nettype none
module noc_interface (
        //inputs
        input wire clk,
        input wire rst_n,
        input wire noc_in,
        input wire processing_in,

        //outputs
        output wire noc_out,
        output wire processing_out,
        output wire noc_ready,
);
//reg [1:0] sync_noc_in, sync_processing_in;
reg [3:0] destination_ID,source_ID,outut_dest,output_source;
reg [7:0] op_code,output_op_code;
reg [4:0] counter;
reg [15:0] out_reg;
reg fail;

always @(posedge clk or negedge rst_n) begin 
    if (~rst_n) begin
        destination_ID <= 4'b0;
        source_ID <= 4'b0;
        op_code <= 8'b0;
        counter <= 5'b0;
	end else begin
        if (counter < 5'd16) begin 
           counter <= counter + 1;
        end
        case (counter)
            5'd1, 5'd2, 5'd3, 5'd4: destination_ID[counter - 1] <= noc_in;
            5'd5, 5'd6, 5'd7, 5'd8: source_ID[counter - 5] <= noc_in;
            5'd9 ,5'd10, 5'd11, 5'd12, 5'd13 ,5'd14 ,5'd15, 5'd16: op_code[counter - 9] <= noc_in;
            default:
            if(destination_ID = 4'b0000)begin //to be changed to whatever the address will be
                processing_out <= noc_in;
            end else begin 
                fail <= 0'b1;
            end
            case(opcode)
            //certain op code means destination id is blah
            endcase
        endcase
        if (fail = 1'b1) begin
            out_reg <= 0'b_11111111//insert source ID and destination ID
        end
    end
end
    //verify destination ID
    //identify source ID and new OP code from given OP code
    //Intercept OP code and determine address
    //Pass along the rest to processing
    //Wait for Processing to feed something back


endmodule